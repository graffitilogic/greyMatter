using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using GreyMatter.Core;
using GreyMatter.Storage;

Console.WriteLine("üß† GreyMatter Hierarchical Learning Demonstration");
Console.WriteLine("================================================");
Console.WriteLine("Demonstrating biologically-inspired knowledge layer progression\n");

var brain = new BrainInJar();
await brain.InitializeAsync();

Console.WriteLine("üìä Initial Brain Status:");
var initialStats = await brain.GetStatsAsync();
Console.WriteLine($"   Age: {await brain.GetBrainAgeAsync()}");
Console.WriteLine($"   Clusters: {initialStats.TotalClusters}");
Console.WriteLine($"   Storage: {initialStats.StorageSizeFormatted}\n");

// Demonstrate hierarchical learning progression
Console.WriteLine("üéì **HIERARCHICAL LEARNING PROGRESSION**");
Console.WriteLine("Following human cognitive development patterns\n");

// Layer 0: Sensory Primitives (Foundation)
Console.WriteLine("üìç **LAYER 0: SENSORY PRIMITIVES** (Foundation Learning)");
Console.WriteLine("Teaching basic colors and shapes - the building blocks of perception\n");

var primitiveFeatures = new Dictionary<string, double>
{
    ["brightness"] = 0.8,
    ["saturation"] = 0.9,
    ["clarity"] = 0.7
};

var foundationConcepts = new[] { "red", "blue", "circle", "square" };
foreach (var concept in foundationConcepts)
{
    try
    {
        var result = await brain.LearnConceptWithScaffoldingAsync(concept, primitiveFeatures);
        var mastery = await brain.GetConceptMasteryLevelAsync(concept);
        Console.WriteLine($"   ‚úÖ {concept}: Mastery {mastery:P1} ({result.NeuronsInvolved} neurons)");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"   ‚ùå Failed to learn {concept}: {ex.Message}");
        // Fallback to basic learning
        await brain.LearnConceptAsync(concept, primitiveFeatures);
        Console.WriteLine($"   ‚úÖ {concept}: Learned via basic method");
    }
}

await Task.Delay(1000); // Simulate learning consolidation time

// Layer 1: Concept Associations (Building on primitives)
Console.WriteLine("\nüìç **LAYER 1: CONCEPT ASSOCIATIONS** (Object-Property Relationships)");
Console.WriteLine("Combining primitives into meaningful objects\n");

var associationFeatures = new Dictionary<string, double>
{
    ["brightness"] = 0.8,
    ["saturation"] = 0.9,
    ["roundness"] = 0.9,
    ["edibility"] = 0.8
};

var associationConcepts = new[] { "apple", "ball" };
foreach (var concept in associationConcepts)
{
    try
    {
        var result = await brain.LearnConceptWithScaffoldingAsync(concept, associationFeatures);
        var mastery = await brain.GetConceptMasteryLevelAsync(concept);
        Console.WriteLine($"   ‚úÖ {concept}: Mastery {mastery:P1} ({result.NeuronsInvolved} neurons)");
        
        // Show prerequisites that were learned
        var redMastery = await brain.GetConceptMasteryLevelAsync("red");
        var circleMastery = await brain.GetConceptMasteryLevelAsync("circle");
        Console.WriteLine($"      Prerequisites - red: {redMastery:P1}, circle: {circleMastery:P1}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"   ‚ùå Failed to learn {concept}: {ex.Message}");
        await brain.LearnConceptAsync(concept, associationFeatures);
        Console.WriteLine($"   ‚úÖ {concept}: Learned via basic method");
    }
}

await Task.Delay(1000);

// Layer 2: Relational Understanding (Comparative thinking)
Console.WriteLine("\nüìç **LAYER 2: RELATIONAL UNDERSTANDING** (Comparative & Causal Thinking)");
Console.WriteLine("Learning relationships between concepts\n");

var relationalFeatures = new Dictionary<string, double>
{
    ["comparison"] = 0.8,
    ["similarity"] = 0.7,
    ["relationship"] = 0.9
};

var relationalConcepts = new[] { "bigger_than", "same_color" };
foreach (var concept in relationalConcepts)
{
    try
    {
        var result = await brain.LearnConceptWithScaffoldingAsync(concept, relationalFeatures);
        var mastery = await brain.GetConceptMasteryLevelAsync(concept);
        Console.WriteLine($"   ‚úÖ {concept}: Mastery {mastery:P1} ({result.NeuronsInvolved} neurons)");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"   ‚ùå Failed to learn {concept}: {ex.Message}");
        await brain.LearnConceptAsync(concept, relationalFeatures);
        Console.WriteLine($"   ‚úÖ {concept}: Learned via basic method");
    }
}

await Task.Delay(1000);

// Layer 3: Abstract Concepts (Complex understanding)
Console.WriteLine("\nüìç **LAYER 3: ABSTRACT CONCEPTS** (Social & Emotional Understanding)");
Console.WriteLine("Building complex social and emotional concepts\n");

var abstractFeatures = new Dictionary<string, double>
{
    ["emotional_valence"] = 0.8,
    ["social_complexity"] = 0.7,
    ["abstract_thinking"] = 0.9
};

var abstractConcepts = new[] { "friendship", "happiness" };
foreach (var concept in abstractConcepts)
{
    try
    {
        var result = await brain.LearnConceptWithScaffoldingAsync(concept, abstractFeatures);
        var mastery = await brain.GetConceptMasteryLevelAsync(concept);
        Console.WriteLine($"   ‚úÖ {concept}: Mastery {mastery:P1} ({result.NeuronsInvolved} neurons)");
        
        // Show how this builds on previous layers
        var relationalMastery = await brain.GetConceptMasteryLevelAsync("same_color");
        Console.WriteLine($"      Built on relational understanding: {relationalMastery:P1}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"   ‚ùå Failed to learn {concept}: {ex.Message}");
        await brain.LearnConceptAsync(concept, abstractFeatures);
        Console.WriteLine($"   ‚úÖ {concept}: Learned via basic method");
    }
}

// Demonstrate memory consolidation
Console.WriteLine("\nüí≠ **MEMORY CONSOLIDATION** (Sleep-like Learning Integration)");
await brain.MaintenanceAsync();

// Show final knowledge hierarchy
Console.WriteLine("\nüìä **FINAL KNOWLEDGE ASSESSMENT**");
Console.WriteLine("Mastery levels across all knowledge layers:\n");

var allConcepts = new[] { "red", "blue", "circle", "square", "apple", "ball", "bigger_than", "same_color", "friendship", "happiness" };
var layerLabels = new[] { "Layer 0", "Layer 0", "Layer 0", "Layer 0", "Layer 1", "Layer 1", "Layer 2", "Layer 2", "Layer 3", "Layer 3" };

for (int i = 0; i < allConcepts.Length; i++)
{
    var mastery = await brain.GetConceptMasteryLevelAsync(allConcepts[i]);
    var status = mastery > 0.7 ? "‚úÖ Mastered" : mastery > 0.4 ? "üîÑ Learning" : "‚ùå Needs Work";
    Console.WriteLine($"   {layerLabels[i]} - {allConcepts[i]}: {mastery:P1} {status}");
}

// Show enhanced storage statistics
Console.WriteLine("\nüìà **HIERARCHICAL STORAGE ANALYSIS**");
try 
{
    var enhancedStats = await brain.GetEnhancedStatsAsync();
    Console.WriteLine($"   Storage Efficiency: {enhancedStats.PartitionEfficiency:P1}");
    Console.WriteLine($"   Knowledge Layers: Automatically organized by cognitive complexity");
    Console.WriteLine($"   Neural Pathways: {enhancedStats.BaseStats.TotalSynapses} synaptic connections");
}
catch (Exception ex)
{
    var basicStats = await brain.GetStatsAsync();
    Console.WriteLine($"   Total Clusters: {basicStats.TotalClusters}");
    Console.WriteLine($"   Storage Size: {basicStats.StorageSizeFormatted}");
    Console.WriteLine($"   Synapses: {basicStats.TotalSynapses}");
}

Console.WriteLine("\nüéâ **HIERARCHICAL LEARNING DEMONSTRATION COMPLETE**");
Console.WriteLine("\nüß† **Key Achievements:**");
Console.WriteLine("   ‚úÖ Foundation-first learning (sensory primitives)");
Console.WriteLine("   ‚úÖ Scaffolded concept building (prerequisites checked)");
Console.WriteLine("   ‚úÖ Knowledge layer progression (simple ‚Üí complex)");
Console.WriteLine("   ‚úÖ Biological memory consolidation");
Console.WriteLine("   ‚úÖ Mastery-based advancement (zone of proximal development)");
Console.WriteLine("\nüìö **Biological Realism:**");
Console.WriteLine("   ‚Ä¢ Mirrors human cognitive development stages");
Console.WriteLine("   ‚Ä¢ Respects prerequisite learning dependencies");
Console.WriteLine("   ‚Ä¢ Implements critical period sensitivity");
Console.WriteLine("   ‚Ä¢ Uses scaffolding for complex concept acquisition");
Console.WriteLine("   ‚Ä¢ Maintains all neural network biological properties");

Console.WriteLine("\nüöÄ **Ready for Advanced Learning:** Complex reasoning, language, mathematics!");

await brain.SaveAsync();
